# -*- coding: utf-8 -*-
"""assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FuVFC67ZC_NHxQlKC9jq45jbx9oqAZS6
"""



import random

def generate_puzzle():
    puzzle_state = list(range(1, 9)) + [0]  # Initialize with tiles and empty space
    random.shuffle(puzzle_state)
    blank_row = puzzle_state.index(0) // 3
    inversions = 0
    for i in range(len(puzzle_state)):
        for j in range(i + 1, len(puzzle_state)):
            if puzzle_state[i] > puzzle_state[j] and puzzle_state[j] != 0:
                inversions += 1
    if (blank_row % 2 == 0 and inversions % 2 != 0) or \
       (blank_row % 2 == 1 and inversions % 2 == 0):
        # Current state is unsolvable, keep shuffling until solvable
        while True:
            random.shuffle(puzzle_state)
            blank_row = puzzle_state.index(0) // 3
            inversions = 0
            for i in range(len(puzzle_state)):
                for j in range(i + 1, len(puzzle_state)):
                    if puzzle_state[i] > puzzle_state[j] and puzzle_state[j] != 0:
                        inversions += 1
            if (blank_row % 2 == 0 and inversions % 2 == 0) or \
               (blank_row % 2 == 1 and inversions % 2 != 0):
                break  # Solvable state found

    return [puzzle_state[i:i+3] for i in range(0, 9, 3)]  # Reshape into 3x3 list

# Example usage
puzzle = generate_puzzle()
print(puzzle)

